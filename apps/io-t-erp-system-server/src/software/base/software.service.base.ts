/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Software as PrismaSoftware } from "@prisma/client";

export class SoftwareServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SoftwareCountArgs, "select">): Promise<number> {
    return this.prisma.software.count(args);
  }

  async softwareItems(
    args: Prisma.SoftwareFindManyArgs
  ): Promise<PrismaSoftware[]> {
    return this.prisma.software.findMany(args);
  }
  async software(
    args: Prisma.SoftwareFindUniqueArgs
  ): Promise<PrismaSoftware | null> {
    return this.prisma.software.findUnique(args);
  }
  async createSoftware(
    args: Prisma.SoftwareCreateArgs
  ): Promise<PrismaSoftware> {
    return this.prisma.software.create(args);
  }
  async updateSoftware(
    args: Prisma.SoftwareUpdateArgs
  ): Promise<PrismaSoftware> {
    return this.prisma.software.update(args);
  }
  async deleteSoftware(
    args: Prisma.SoftwareDeleteArgs
  ): Promise<PrismaSoftware> {
    return this.prisma.software.delete(args);
  }
}
